// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]

  @@map("users")
}

model Attendance {
  id        Int               @id @default(autoincrement())
  userId    String            @db.VarChar(255)
  location  String?           @db.VarChar(255)
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    AttendancePhoto[]
  audio     AttendanceAudio?

  @@map("attendance")
}

model AttendancePhoto {
  id           Int        @id @default(autoincrement())
  attendanceId Int
  photoUrl     String     @db.VarChar(500)
  createdAt    DateTime   @default(now())
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("attendance_photos")
}

model AttendanceAudio {
  id           Int        @id @default(autoincrement())
  attendanceId Int        @unique
  audioUrl     String     @db.VarChar(500)
  createdAt    DateTime   @default(now())
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("attendance_audio")
}