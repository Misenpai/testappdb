// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  ABSOLUTE
  APPROX
  FIELDTRIP
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SessionType {
  FORENOON  
  AFTERNOON 
}

enum AttendanceType {
  FULL_DAY
  HALF_DAY
}

model User {
  id          String            @id @default(cuid())
  empId       String            @unique @db.VarChar(255)
  username    String            @unique @db.VarChar(255)
  email       String            @unique @db.VarChar(255)
  password    String            @db.VarChar(255)
  location    String            @default("all") @db.VarChar(255)
  role        UserRole          @default(USER)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt


  userLocation         UserLocation?
  attendances          Attendance[]
  attendanceDates      AttendanceDate[]

  @@map("users")
  @@index([role])
  @@index([isActive])
  @@index([empId])
}

model UserLocation {
  id           Int          @id @default(autoincrement())
  empId        String       @unique @db.VarChar(255)
  username     String       @db.VarChar(255)
  locationType LocationType @default(ABSOLUTE)
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  notes        String?      @db.Text
  
  approxLat    Float?       @db.Float
  approxLng    Float?       @db.Float
  approxRadius Int?         @default(100)
  user         User         @relation(fields: [empId], references: [empId], onDelete: Cascade)
  fieldTrips   FieldTrip[]

  @@map("user_locations")
  @@index([locationType])
}

model Attendance {
  id            Int               @id @default(autoincrement())
  empId         String            @db.VarChar(255)
  username      String            @db.VarChar(255)
  takenLocation String?           @db.VarChar(255)
  date          DateTime          @db.Date
  checkInTime   DateTime          @default(now())
  checkOutTime  DateTime?
  sessionType   SessionType       
  attendanceType AttendanceType?  
  isCheckedOut  Boolean          @default(false)
  createdAt     DateTime          @default(now())


  user           User              @relation(fields: [empId], references: [empId], onDelete: Cascade)
  photos         AttendancePhoto[]
  audio          AttendanceAudio[]
  attendanceDate AttendanceDate?

  @@map("attendance")
  @@unique([empId, date])
  @@index([date])
  @@index([empId, date])
  @@index([empId])
  @@index([sessionType])
  @@index([attendanceType])
}

model AttendanceDate {
  id           Int            @id @default(autoincrement())
  empId        String         @db.VarChar(255)
  date         DateTime       @db.Date
  year         Int
  month        Int            
  day          Int            
  dayOfWeek    Int            
  weekOfYear   Int            
  isPresent    Boolean        @default(true)
  attendanceType AttendanceType? 
  attendanceId Int            @unique
  createdAt    DateTime       @default(now())


  user         User       @relation(fields: [empId], references: [empId], onDelete: Cascade)
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("attendance_dates")
  @@unique([empId, date])
  @@index([empId, year, month])
  @@index([empId, date])
  @@index([year, month])
  @@index([empId])
}

model AttendancePhoto {
  id           Int        @id @default(autoincrement())
  attendanceId Int
  photoUrl     String     @db.VarChar(500)
  photoType    String?    @db.VarChar(50)
  createdAt    DateTime   @default(now())
  
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("attendance_photos")
  @@index([attendanceId])
}

model AttendanceAudio {
  id           Int        @id @default(autoincrement())
  attendanceId Int
  audioUrl     String     @db.VarChar(500)
  duration     Int?      
  createdAt    DateTime   @default(now())
  
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("attendance_audio")
  @@index([attendanceId])
}


model AttendanceCalendar {
  id        Int      @id @default(autoincrement())
  empId     String   @db.VarChar(255)
  year      Int
  month     Int      
  daysMask  String   @db.VarChar(31) 
  totalFullDays Int   @default(0)
  totalHalfDays Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendance_calendar")
  @@unique([empId, year, month])
  @@index([empId])
  @@index([year, month])
}

model FieldTrip {
  id            Int          @id @default(autoincrement())
  empId         String       @db.VarChar(255)
  startDate     DateTime     @db.Date
  endDate       DateTime     @db.Date
  description   String?      @db.Text
  createdBy     String       @db.VarChar(255) // Admin who created
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isActive      Boolean      @default(true)
  userLocation  UserLocation @relation(fields: [empId], references: [empId], onDelete: Cascade)

  @@map("field_trips")
  @@index([empId])
  @@index([startDate, endDate])
  @@index([isActive])
}